/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.minimarketgg.ventas;
import com.mycompany.minimarketgg.igu.Menu;
import com.mycompany.minimarketgg.igu.productos.Inventario;
import com.mycompany.minimarketgg.logica.Producto;
import com.mycompany.minimarketgg.logica.ProductoDao; 
import com.mycompany.minimarketgg.logica.Usuario;
import com.mycompany.minimarketgg.logica.Venta;
import com.mycompany.minimarketgg.logica.VentaDao;
import com.mycompany.minimarketgg.util.PantallaUtil;
import java.sql.Timestamp;
import java.util.Date;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
/**
 *
 * @author marqu
 */
public class Pagos extends javax.swing.JPanel {
    
    private JTable tablaVenta;
    private double totalPagar;
    private ProductoDao productoDao;
    private Usuario usuario; 

    public Pagos(JTable tablaVenta, double totalPagar, Usuario usuario) {
        this.tablaVenta = tablaVenta;
        this.totalPagar = totalPagar;
        this.productoDao = new ProductoDao();
        this.usuario = usuario;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnYape = new javax.swing.JButton();
        btnPagoEfect = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnCancelarVenta = new javax.swing.JButton();

        btnYape.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/minimarketgg/imagenes/yape-logo-3E473EE7E5-seeklogo.com.png"))); // NOI18N
        btnYape.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnYapeActionPerformed(evt);
            }
        });

        btnPagoEfect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/minimarketgg/imagenes/efectivo.png"))); // NOI18N
        btnPagoEfect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPagoEfectActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("MÉTODOS DE PAGO");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Pago por Yape");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Pago por efectivo");

        btnCancelarVenta.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btnCancelarVenta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/minimarketgg/imagenes/delete window.png"))); // NOI18N
        btnCancelarVenta.setText("CANCELAR VENTA");
        btnCancelarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarVentaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(220, 220, 220)
                .addComponent(btnYape)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 268, Short.MAX_VALUE)
                .addComponent(btnPagoEfect, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(310, 310, 310))
            .addGroup(layout.createSequentialGroup()
                .addGap(304, 304, 304)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(366, 366, 366))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(425, 425, 425))
            .addGroup(layout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(btnCancelarVenta)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(btnCancelarVenta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnYape)
                    .addComponent(btnPagoEfect, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addContainerGap(138, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void procesarPago(String metodoPago) {
        // Recorrer la tabla de ventas y actualizar el stock de cada producto
        for (int i = 0; i < tablaVenta.getRowCount(); i++) {
            int idProducto = Integer.parseInt(tablaVenta.getValueAt(i, 0).toString());
            int cantidadVendida = Integer.parseInt(tablaVenta.getValueAt(i, 2).toString());

            // Obtener el stock actual del producto
            Producto producto = productoDao.obtenerProductoPorId(idProducto);
            int nuevoStock = producto.getStock() - cantidadVendida;

            // Actualizar el stock en la base de datos
            boolean actualizado = productoDao.actualizarStockProducto(idProducto, nuevoStock);
            if (!actualizado) {
                JOptionPane.showMessageDialog(null, "Error al actualizar el stock del producto: " + producto.getNombre());
                return;
            }
        }

        // Generar el número de boleta
        int numeroBoleta = VentaDao.getNextTicketNumber();

        // Obtener la fecha actual
        Date fecha = new Date();

        // Guardar la venta en la base de datos una sola vez
        registrarVentaEnBD(numeroBoleta, metodoPago, totalPagar, fecha);

        // Actualizar la visualización del inventario
        Inventario inventario = new Inventario(usuario);
        inventario.actualizarTabla();
    }
    private void registrarVentaEnBD(int numeroBoleta, String metodoPago, double total, Date fecha) {
        Timestamp timestamp = new Timestamp(fecha.getTime());
        Venta venta = new Venta(numeroBoleta, metodoPago, total, timestamp);
        VentaDao ventaDao = new VentaDao();
        ventaDao.guardarVenta(venta);
    }
    private void btnYapeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnYapeActionPerformed
        // Obtener el número de boleta
        int numeroBoleta = VentaDao.getNextTicketNumber();

        // Registrar la venta en la base de datos
        registrarVentaEnBD(numeroBoleta, "Yape", totalPagar, new Date());
        // Actualizar el stock después de generar el PDF
        actualizarStockProductos();
        // Abrir la ventana de pago realizado
        JFrame ventanaPagoRealizado = new JFrame();
        PagoRealizado pagoRealizadoPanel = new PagoRealizado(tablaVenta, totalPagar, usuario, "Yape", numeroBoleta);
        ventanaPagoRealizado.setContentPane(pagoRealizadoPanel);
        ventanaPagoRealizado.setSize((int) (PantallaUtil.obtenerAnchoPantalla() * 0.85), (int) (PantallaUtil.obtenerAltoPantalla() * 0.85));
        ventanaPagoRealizado.setVisible(true);
        ventanaPagoRealizado.setLocationRelativeTo(null);
        ventanaPagoRealizado.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        // Cerrar la ventana actual
        JFrame currentFrame = (JFrame) SwingUtilities.getWindowAncestor(this);
        if (currentFrame != null) {
            currentFrame.dispose();
        }
    }//GEN-LAST:event_btnYapeActionPerformed

    private void btnPagoEfectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPagoEfectActionPerformed
        // Abrir la ventana de pago efectivo
        JFrame ventanaPagoEfectivo = new JFrame();
        PagoEfectivo pagoEfectivoPanel = new PagoEfectivo(tablaVenta, totalPagar, usuario, VentaDao.getNextTicketNumber()); // Pasar el número de boleta
        ventanaPagoEfectivo.setContentPane(pagoEfectivoPanel);
        ventanaPagoEfectivo.setSize((int) (PantallaUtil.obtenerAnchoPantalla() * 0.85), (int) (PantallaUtil.obtenerAltoPantalla() * 0.85)); 
        ventanaPagoEfectivo.setVisible(true);
        ventanaPagoEfectivo.setLocationRelativeTo(null);
        ventanaPagoEfectivo.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        // Cerrar la ventana actual
        JFrame currentFrame = (JFrame) SwingUtilities.getWindowAncestor(this);
        if (currentFrame != null) {
            currentFrame.dispose();
        }
    }//GEN-LAST:event_btnPagoEfectActionPerformed

    private void btnCancelarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarVentaActionPerformed
      // Opciones personalizadas para el cuadro de diálogo
        String[] options = {"Sí", "No"};
        int response = JOptionPane.showOptionDialog(
                this, 
                "¿Estás seguro de que quieres cancelar la venta?", 
                "Confirmar cancelación", 
                JOptionPane.YES_NO_OPTION, 
                JOptionPane.QUESTION_MESSAGE, 
                null, 
                options, 
                options[1]);

        // Si el usuario confirma la cancelación
        if (response == JOptionPane.YES_OPTION) {
            // Redirigir al menú principal
            JFrame currentFrame = (JFrame) SwingUtilities.getWindowAncestor(this);
            if (currentFrame != null) {
                currentFrame.dispose(); // Cerrar la ventana actual

                // Crear y mostrar la ventana del menú principal
                Menu menu = new Menu(usuario);  // Pasar el objeto Usuario al menú
                menu.setResizable(false);
                menu.setVisible(true);
                menu.setSize((int) (PantallaUtil.obtenerAnchoPantalla() * 0.62), (int) (PantallaUtil.obtenerAltoPantalla() * 0.67)); // Tamaño de ventana = 85% del monitor
                menu.setLocationRelativeTo(null);
            }
        }
    }//GEN-LAST:event_btnCancelarVentaActionPerformed
    
    private void actualizarStockProductos() {
        for (int i = 0; i < tablaVenta.getRowCount(); i++) {
            int idProducto = Integer.parseInt(tablaVenta.getValueAt(i, 0).toString());
            int cantidadVendida = Integer.parseInt(tablaVenta.getValueAt(i, 2).toString());

            Producto producto = productoDao.obtenerProductoPorId(idProducto);
            int nuevoStock = producto.getStock() - cantidadVendida;

            boolean actualizado = productoDao.actualizarStockProducto(idProducto, nuevoStock);
            if (!actualizado) {
                JOptionPane.showMessageDialog(null, "Error al actualizar el stock del producto: " + producto.getNombre());
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelarVenta;
    private javax.swing.JButton btnPagoEfect;
    private javax.swing.JButton btnYape;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
